version: '3.4'
services:

  db:
    image: postgres:9.6-alpine
    env_file: env/db.env
    networks:
      - nemushee_internal
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "mastodon", "-d", "mastodon_production"]
    volumes:
      - nemushee_postgres_v2:/var/lib/postgresql/data
    deploy:
      placement:
        constraints: [node.hostname == spt-node-pear]

  redis:
    image: redis:6.0-alpine
    networks:
      - nemushee_internal
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
    volumes:
      - redis:/data
    deploy:
      placement:
        constraints: [node.hostname == spt-node-pear]

  web:
    image: ghcr.io/katonux/nemushee/mastodon:3.3.0
    env_file: .env.production
    command: bash -c "rm -f /mastodon/tmp/pids/server.pid; bundle exec rails s -p 3000 -b '0.0.0.0'"
    environment:
      - VIRTUAL_HOST=nemushee.net
      - VIRTUAL_PORT=3000
      - LETSENCRYPT_HOST=nemushee.net
      - LETSENCRYPT_EMAIL=sheeptech@vivaldi.net
    networks:
      - front
      - traefik_ingress
      - nemushee_internal
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider --proxy=off localhost:3000/health || exit 1"]
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=traefik_ingress"
        - "traefik.http.routers.nemushee-puma.tls=true"
        - "traefik.http.routers.nemushee-puma.tls.certresolver=myresolver"
        - "traefik.http.routers.nemushee-puma.rule=Host(`nemushee.net`)"
        - "traefik.http.routers.nemushee-puma.entrypoints=websecure"
        - "traefik.http.services.puma.loadbalancer.server.port=3000"
      replicas: 2
      placement:
        constraints: [node.platform.arch == x86_64]

  storage:
    image: minio/minio
    volumes:
      - storage:/export:z
    networks:
      - front
      - traefik_ingress
      - nemushee_internal
    env_file: env/minio.env
    environment:
      - VIRTUAL_HOST=media.nemushee.net
      - VIRTUAL_PORT=9000
      - LETSENCRYPT_HOST=media.nemushee.net
      - LETSENCRYPT_EMAIL=sheeptech@vivaldi.net
    command: server /export
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=traefik_ingress"
        - "traefik.http.routers.nemushee-minio.tls=true"
        - "traefik.http.routers.nemushee-minio.tls.certresolver=myresolver"
        - "traefik.http.routers.nemushee-minio.rule=Host(`media.nemushee.net`)"
        - "traefik.http.routers.nemushee-minio.entrypoints=websecure"
        - "traefik.http.services.minio.loadbalancer.server.port=9000"
      placement:
        constraints: [node.hostname == spt-node-fig]

  streaming:
    image: ghcr.io/katonux/nemushee/mastodon:3.3.0
    env_file: .env.production
    command: node ./streaming
    environment:
      - VIRTUAL_HOST=stream.nemushee.net
      - VIRTUAL_PORT=4000
      - LETSENCRYPT_HOST=stream.nemushee.net
      - LETSENCRYPT_EMAIL=sheeptech@vivaldi.net
    networks:
      - front
      - traefik_ingress
      - nemushee_internal
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider --proxy=off localhost:4000/api/v1/streaming/health || exit 1"]
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=traefik_ingress"
        - "traefik.http.routers.nemushee-stream.tls=true"
        - "traefik.http.routers.nemushee-stream.tls.certresolver=myresolver"
        - "traefik.http.routers.nemushee-stream.rule=Host(`stream.nemushee.net`)"
        - "traefik.http.routers.nemushee-stream.entrypoints=websecure"
        - "traefik.http.services.stream.loadbalancer.server.port=4000"
      replicas: 2
      placement:
        constraints: [node.platform.arch == x86_64]

  sidekiq:
    image: ghcr.io/katonux/nemushee/mastodon:3.3.0
    env_file: .env.production
    command: bundle exec sidekiq -c 2
    networks:
      - nemushee_internal
    deploy:
      replicas: 4
      placement:
        constraints: [node.platform.arch == x86_64]

  es:
    image: elasticsearch:7.10.1
    environment:
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - "cluster.name=es-mastodon"
      - "discovery.type=single-node"
      - "bootstrap.memory_lock=true"
    networks:
      - nemushee_internal
    healthcheck:
      test: ["CMD-SHELL", "curl --silent --fail localhost:9200/_cluster/health || exit 1"]
    volumes:
      - elasticsearch:/usr/share/elasticsearch/data
    ulimits:
      memlock:
        soft: -1
        hard: -1
    deploy:
      replicas: 1
      placement:
        constraints: [node.hostname == spt-node-raspberry]

volumes:
  nemushee_postgres_v2:
   external: true
  redis:
    driver: local
  sidekiq:
    driver: local
  storage:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /mnt/disk2t/nemushee
  elasticsearch:
    driver: local

networks:
  front:
    external: true
  traefik_ingress:
    driver: overlay
    external: true
  nemushee_internal:
    internal: true
    external: true
